#
# Copyright (C) 2014  Paul Wolneykien <manowar@altlinux.org>
# Copyright (C) 2014  STC Metrotek [http://metrotek.spb.ru/]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Customization section
# ---------------------

# Pocket flavour:
FLAVOUR = debian

# Subconfig number:
NUM =

# Architecture
ARCH =

# The list of the pocket components:
COMPONENTS =

# hasher-priv directory:
HSHPRIVDIR = /usr/lib/hasher-priv

# system resolv.conf file:
RESOLVCONF = /etc/resolv.conf

# debootstrap program:
DEBOOTSTRAP = /usr/sbin/debootstrap

# What to use for `dpkg -x`:
DPKGX = dpkg -x

# Distro variant:
VARIANT = minbase

# BisyBox package name:
BBOXPKG = busybox-static

# Additional packages in the base system:
SYSPKGLIST = fakeroot $(BBOXPKG) rsync

# Build system packages:
BUILDPKGLIST = build-essential devscripts equivs reprepro

# Test-root additional packages:
TESTPKGLIST = man


# Essential variables
# -------------------

BUILDROOT = buildroot$(if $(ARCH),-$(ARCH))
BUILDREPO = buildrepo$(if $(ARCH),-$(ARCH))
INSTALLROOT = installroot$(if $(ARCH),-$(ARCH))

comma:= ,
empty:=
space:= $(empty) $(empty)

MAKEDEV = $(HSHPRIVDIR)/makedev.sh $(if $(NUM),-$(NUM))
USER_A = $(addsuffix _a$(NUM), $(USER))
USER_B = $(addsuffix _b$(NUM), $(USER))
RUN_A = $(HSHPRIVDIR)/chrootuid1.sh $(if $(NUM),-$(NUM))
RUN_B = $(HSHPRIVDIR)/chrootuid2.sh $(if $(NUM),-$(NUM))
GETUGID_A = $(HSHPRIVDIR)/getugid1.sh $(if $(NUM),-$(NUM))
GETUGID_B = $(HSHPRIVDIR)/getugid2.sh $(if $(NUM),-$(NUM))
ROOTER = rooter
BUILDER = builder
BUILDER_HOME = /usr/src
INDIR = /.in
INREPODIR = $(INDIR)/repo
OUTDIR = /.out
OUTREPODIR = $(OUTDIR)/repo
OUTNAME = local

FAKEROOT = /usr/bin/fakeroot-sysv $(if $(wildcard $(BUILDROOT)/.fakedata),-i /.fakedata) -s /.fakedata
SHELL = /bin/bash
USERSHELL = /bin/bash


# Repository and distro configuration
# -----------------------------------

REPO = $(firstword $(subst :,$(space),$(firstword $(COMPONENTS))))
DISTRO = $(firstword $(subst /,$(space),$(patsubst $(REPO):%,%,$(firstword $(filter $(REPO):%, $(COMPONENTS))))))
USER_DISTCOMPS = $(patsubst $(REPO):$(DISTRO)/%,%,$(filter $(REPO):$(DISTRO)/%, $(COMPONENTS)))
DISTCOMPS = $(if $(USER_DISTCOMPS),$(USER_DISTCOMPS),$(if $($(REPO)_COMPONENTS),$($(REPO)_COMPONENTS)))
SYSPKGLIST += $($(REPO)_INITIAL_PACKAGES)
BUILDPKGLIST += $($(REPO)_EXTRA_PACKAGES)
TESTPKGLIST += $($(REPO)_EXTRA_PACKAGES)


# Buildroot layout
# ----------------

DEBPATHS = $(BUILDROOT)/.host/debootstrap/debpaths

BUILDROOTTAR = $(REPO)-$(DISTRO)$(if $(ARCH),-$(ARCH)).tar.gz
BUILDROOTTARDIRS = debootstrap var/cache/apt/archives var/lib/apt/lists

BUSYBOX = /.host/bin/busybox
APTARCHIVES = /var/cache/apt/archives

## Pocketfile Debian
## =================

##
## Use `sync-in` then `build` to build the debian package from
## source code. Use `shell` for shell. Brief help page is accessible
## with `help` and a little more detailed manual with `doc` and
## `doc SUBJ=<subject>` actions.

##
## Targets (actions)
## -----------------

##
## * `bootstrap`  Sets up a minimal Debian system in the buildroot.
## When is called for the first time, `bootstrap` uses `debootstrap`
## to download the required set of packages, saving them into
## `<repo>-<distro>-<arch>.tar.gz` tarball for future use. Downloaded
## packages are then installed and configured. On the successful
## finish of the action the minimal system inside `buildroot` chroot
## is ready for use with other actions, such as `shell` and `build`.
## Most of the targets depends on `bootstrap` calling it automatically
## when the buildroot isn't ready.
bootstrap: $(BUILDROOT)/.configured

$(BUILDROOT)/.preconfigured: $(BUILDROOT)/.preinstalled
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'touch /etc/passwd' >>$(BUILDROOT)/.host/entry
	@echo 'touch /etc/group' >>$(BUILDROOT)/.host/entry
	@echo 'touch /etc/shadow' >>$(BUILDROOT)/.host/entry
	@echo 'update-passwd' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry
	touch $@

$(BUILDROOT)/.configured: $(BUILDROOT)/.installed
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@UGID_A="$$($(GETUGID_A))"; \
	 if [ -n "$UGID_A" ]; then \
	   echo "groupadd -g $${UGID_A#*:} $(ROOTER)" >>$(BUILDROOT)/.host/entry; \
	   echo "useradd -d /root -u $${UGID_A%%:*} -g $${UGID_A#*:} -s $(USERSHELL) $(ROOTER)" >>$(BUILDROOT)/.host/entry; \
	 else \
	   echo 'Unable to get user and group IDs of the pseudouser A' >&2; \
	   exit 1; \
	 fi
	@UGID_B="$$($(GETUGID_B))"; \
	 if [ -n "$UGID_B" ]; then \
	   echo 'chmod 1777 $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry; \
	   echo "groupadd -g $${UGID_B#*:} $(BUILDER)" >>$(BUILDROOT)/.host/entry; \
	   echo "useradd -d $(BUILDER_HOME) -u $${UGID_B%%:*} -g $${UGID_B#*:} -s $(USERSHELL) $(BUILDER)" >>$(BUILDROOT)/.host/entry; \
	 else \
	   echo 'Unable to get user and group IDs of the pseudouser B' >&2; \
	   exit 1; \
	 fi
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry
	touch $@

$(BUILDROOT)/.extracted: $(DEBPATHS) $(BUILDROOT)/dev/.stamp \
	                 $(BUILDROOT)$(BUSYBOX)
	@echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry
	@echo 'set -ex' >>$(BUILDROOT)/.host/entry
	@sed -e 's/^[^[:space:]]\+[[:space:]]\+//' \
	     -e 's,^.*$$,$(BUSYBOX) dpkg-deb -x /.host& /,' \
	  $(DEBPATHS) >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry
	touch $@

$(BUILDROOT)/.preinstalled: $(BUILDROOT)/.extracted
	@echo '#!/bin/sh -e' >$(BUILDROOT)/.host/entry
	@echo 'rm -f /var/lib/dpkg/status' >>$(BUILDROOT)/.host/entry
	@echo 'touch /var/lib/dpkg/status' >>$(BUILDROOT)/.host/entry
	@echo 'touch /var/lib/dpkg/available' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir -p /var/lib/dpkg/info' >>$(BUILDROOT)/.host/entry
	@echo 'install() {' >>$(BUILDROOT)/.host/entry
	@echo '  local pkg="$$1"' >>$(BUILDROOT)/.host/entry
	@echo '  local deb="$$2"' >>$(BUILDROOT)/.host/entry
	@echo '  dpkg-deb -f "$$deb"' >>$(BUILDROOT)/.host/entry
	@echo "  echo 'Status: install ok installed'" \
	  >>$(BUILDROOT)/.host/entry
	@echo '  echo' >>$(BUILDROOT)/.host/entry
	@echo '  dpkg-deb -c "$$deb" | sed -n -e "/^.*[[:space:]]\.\// { s,^.*[[:space:]]\./,,; s/^$$/./; s/[[:space:]]->[[:space:]].*$$//; s,/$$,,; s,^.*$$,/&,; p }" >/var/lib/dpkg/info/$$pkg.list' \
	  >>$(BUILDROOT)/.host/entry
	@echo "  echo \"Updated '\$$pkg' status\" >&2" \
	  >>$(BUILDROOT)/.host/entry
	@echo '}' >>$(BUILDROOT)/.host/entry
	@sed -e 's,^\([^[:space:]]\+\)[[:space:]]\+\(.*\)$$,install "\1" "/.host\2" >>/var/lib/dpkg/status,' $(DEBPATHS) >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry
	touch $@

$(BUILDROOT)/.installed: $(BUILDROOT)/.preconfigured
	@pkgs="$$(sed -e 's/^[^[:space:]]\+[[:space:]]\+//' -e 's,^.*$$,/.host&,' -e 's,^/.host/var/cache/apt/archives/,,' $(DEBPATHS) | tr '\n' ' ')"; \
	 if [ -n "$$pkgs" ]; then \
	   echo "Reinstalling packages..." >&2; \
	   echo '#!/bin/sh -e' >$(BUILDROOT)/.host/entry; \
	   echo 'cp /var/lib/dpkg/status /var/lib/dpkg/status.ok' >>$(BUILDROOT)/.host/entry; \
	   echo 'cd /.host/var/cache/apt/archives' >>$(BUILDROOT)/.host/entry; \
	   echo "dpkg -i $$pkgs" >>$(BUILDROOT)/.host/entry; \
	   chmod 0755 $(BUILDROOT)/.host/entry; \
	   $(RUN_A) $(realpath $(BUILDROOT)) $(FAKEROOT) /.host/entry; \
	 fi
	touch $@

$(BUILDROOT)$(BUSYBOX): $(DEBPATHS)
	@ \
	bb="$$(sed -n -e 's/^$(BBOXPKG)[[:space:]]\+//p' $(DEBPATHS))"; \
	if [ -n "$$bb" ]; then \
		echo $(DPKGX) $(BUILDROOT)/.host$$bb $(BUILDROOT)/.host >&2; \
		$(DPKGX) $(BUILDROOT)/.host$$bb $(BUILDROOT)/.host; \
		touch $@; \
	else \
		echo "Error: package '$(BBOXPKG)' not found" >&2; \
		exit 1; \
	fi

##
## * `download`  Downloads the set of packages required by the minimal
## system. It uses `debootstrap` to get the packages. The result is
## saved into `<repo>-<distro>-<arch>.tar.gz` tarball.
download: $(BUILDROOTTAR)
extract: $(DEBPATHS)

$(DEBPATHS): $(BUILDROOTTAR) $(BUILDROOT)/.stamp
	tar xpf $(BUILDROOTTAR) -C $(BUILDROOT)/.host
	touch $@

$(BUILDROOTTAR):
	$(if $(REPO),,$(error No repositories are specified))
	$(if $($(REPO)_MIRROR),,$(error Mirror of "$(REPO)" is unknown))
	$(if $(DISTRO),,$(error Distribution name is not specified))
	rm -rf $(BUILDROOT)/.host
	mkdir -p $(BUILDROOT)
	$(DEBOOTSTRAP) --download-only \
		       $(if $(ARCH),--arch=$(ARCH)) \
		       --variant=$(VARIANT) \
	    $(if $(strip $(SYSPKGLIST)),--include=$(subst $(space),$(comma),$(strip $(SYSPKGLIST)))) \
	    $(if $(DISTCOMPS),--components=$(subst $(space),$(comma),$(DISTCOMPS))) \
		$(DISTRO) $(BUILDROOT)/.host $($(REPO)_MIRROR)
	tar cpf $@ -C $(BUILDROOT)/.host $(BUILDROOTTARDIRS)

$(BUILDROOT)/.stamp:
	mkdir -p $(BUILDROOT)
	chgrp $(USER_A) $(BUILDROOT)
	chmod 1775 $(BUILDROOT)
	mkdir -p $(BUILDROOT)/.host
	mkdir -p $(BUILDROOT)$(INDIR)
	mkdir -p $(BUILDROOT)$(OUTDIR)
	chgrp $(USER_B) $(BUILDROOT)$(OUTDIR)
	chmod 1770 $(BUILDROOT)$(OUTDIR)
	touch $@

$(BUILDROOT)/dev/.stamp: $(BUILDROOT)/.stamp
	mkdir -p $(BUILDROOT)/dev
	chgrp $(USER_A) $(BUILDROOT)/dev
	mkdir $(BUILDROOT)/dev/pts
	chgrp $(USER_A) $(BUILDROOT)/dev/pts
	$(MAKEDEV) $(realpath $(BUILDROOT))
	mkdir -m1777 $(BUILDROOT)/dev/shm
	touch $@

clean: $(BUILDROOT)/dev/.stamp $(BUILDROOT)$(BUSYBOX) clean-builder
	@echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry
	@echo 'set -e' >>$(BUILDROOT)/.host/entry
	@echo 'for f in /*; do' >>$(BUILDROOT)/.host/entry
	@echo '  [ -O "$$f" ] || continue' >>$(BUILDROOT)/.host/entry
	@echo '  rm -rf "$$f"' >>$(BUILDROOT)/.host/entry
	@echo '  echo "Removed \"$$f\"" >&2' >>$(BUILDROOT)/.host/entry
	@echo 'done' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry
	rm -fv $(BUILDROOT)/.testenv
	rm -fv $(BUILDROOT)/.installrepodone
	rm -fv $(BUILDROOT)/.builddeps
	rm -fv $(BUILDROOT)/.buildenv
	rm -fv $(BUILDROOT)/.updated
	rm -fv $(BUILDROOT)/.configured
	rm -fv $(BUILDROOT)/.installed
	rm -fv $(BUILDROOT)/.preconfigured
	rm -fv $(BUILDROOT)/.preinstalled
	rm -fv $(BUILDROOT)/.extracted
	rm -fv $(BUILDROOT)/.fakedata

clean-builder: $(BUILDROOT)/dev/.stamp $(BUILDROOT)$(BUSYBOX)
	@if [ -d $(BUILDROOT)$(BUILDER_HOME) ]; then \
	   echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry; \
	   echo 'set -e' >>$(BUILDROOT)/.host/entry; \
	   echo 'find "$(BUILDER_HOME)" -mindepth 1 -prune -exec rm -rf {} \;' >>$(BUILDROOT)/.host/entry; \
	   echo 'echo "Cleaned \"$(BUILDER_HOME)\"" >&2' >>$(BUILDROOT)/.host/entry; \
	   chmod 0755 $(BUILDROOT)/.host/entry; \
	   $(RUN_B) $(realpath $(BUILDROOT)) /.host/entry; \
	 fi

$(BUILDROOT)/etc/resolv.conf: $(BUILDROOT)/.configured
	$(if $(RESOLVCONF),,$(error resolv.conf is not configured))
	@echo '#!/bin/sh -e' >$(BUILDROOT)/.host/entry
	@echo 'cat <<EOF >/etc/resolv.conf' >>$(BUILDROOT)/.host/entry
	@cat $(RESOLVCONF) >>$(BUILDROOT)/.host/entry
	@echo 'EOF' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	@echo "Setting up $(BUILDROOT)/etc/resolv.conf" >&2
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry

update: rm-updated $(BUILDROOT)/.updated

rm-updated:
	@if [ -e $(BUILDROOT)/.updated ]; then \
	  rm -fv $(BUILDROOT)/.updated;\
	  echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry; \
	  echo 'rm -fv /etc/resolv.conf' >>$(BUILDROOT)/.host/entry; \
	  $(RUN_A) $(realpath $(BUILDROOT)) /.host/entry; \
	fi

clean-updated: rm-updated
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'rm -rf /etc/apt/sources.list.d' >>$(BUILDROOT)/.host/entry
	@echo 'rm -f /etc/apt/sources.list' >>$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get update' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(realpath $(BUILDROOT)) /.host/entry

$(BUILDROOT)/.updated: $(BUILDROOT)/etc/resolv.conf $(if $(wildcard $(BUILDREPO)/dists/$(OUTNAME)/Release),$(BUILDREPO)/dists/$(OUTNAME)/Release)
	$(if $(DISTRO),,$(error Distribution name is not specified))
	$(if $(DISTCOMPS),,$(error No distribution components are specified))
	rm -rf $(BUILDROOT)$(INREPODIR)
	if [ -f $(BUILDREPO)/dists/$(OUTNAME)/Release ]; then \
	   mkdir $(BUILDROOT)$(INREPODIR); \
	   cp -a $(BUILDREPO)/* \
		 $(BUILDROOT)$(INREPODIR)/ ; \
	fi
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'rm -rf /etc/apt/sources.list.d' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir /etc/apt/sources.list.d' >>$(BUILDROOT)/.host/entry
	@echo 'echo "deb $($(REPO)_MIRROR) $(DISTRO) $(DISTCOMPS)" >/etc/apt/sources.list.d/$(DISTRO).list' >>$(BUILDROOT)/.host/entry
	@if [ -d $(BUILDROOT)$(INREPODIR) ]; then \
	   comps="$$(sed -n -e '/^Components:/ { s/^[^[:space:]]\+[[:space:]]*//p; q }' $(BUILDROOT)$(INREPODIR)/dists/$(OUTNAME)/Release)"; \
	   if [ -z "$$comps" ]; then \
	     echo "No components in $(BUILDROOT)$(INREPODIR)/dists/$(OUTNAME)" >&2; \
	     exit 1; \
	   fi; \
	   echo "echo \"deb file://$(INREPODIR) $(OUTNAME) $$comps\" >/etc/apt/sources.list" >>$(BUILDROOT)/.host/entry; \
	else \
	   echo 'rm -f /etc/apt/sources.list' >>$(BUILDROOT)/.host/entry; \
	fi
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get update' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(realpath $(BUILDROOT)) /.host/entry
	touch $(BUILDROOT)/.updated

$(if $(filter install,$(MAKECMDGOALS)),$(if $(PKGS),,$(error Specify packages to install using 'PKGS=')))

install: $(BUILDROOT)/.updated
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(PKGS)' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(realpath $(BUILDROOT)) $(FAKEROOT) /.host/entry

shell: $(BUILDROOT)/.configured
	@echo '#!/bin/sh -e' >$(BUILDROOT)/.host/entry
	@if [ "$(ROLE)" = '$(ROOTER)' ]; then \
	   echo "export TMPDIR='/tmp'" >>$(BUILDROOT)/.host/entry; \
	   echo 'cd "/root"' >>$(BUILDROOT)/.host/entry; \
	   echo '$(USERSHELL)' >>$(BUILDROOT)/.host/entry; \
	   $(if $(SHARE_NETWORK),share_network=$(SHARE_NETWORK)) use_pty=yes $(RUN_A) $(realpath $(BUILDROOT)) $(FAKEROOT) /.host/entry; \
	else \
	   echo "export TMPDIR='$(BUILDER_HOME)/tmp'" >>$(BUILDROOT)/.host/entry; \
	   echo 'mkdir -p "$$TMPDIR"' >>$(BUILDROOT)/.host/entry; \
	   echo 'cd "$(BUILDER_HOME)"' >>$(BUILDROOT)/.host/entry; \
	   echo '$(USERSHELL)' >>$(BUILDROOT)/.host/entry; \
	   $(if $(SHARE_NETWORK),share_network=$(SHARE_NETWORK)) use_pty=yes $(RUN_B) $(realpath $(BUILDROOT)) /.host/entry; \
	fi; \
	exit 0

install-buildenv: $(BUILDROOT)/.buildenv

$(BUILDROOT)/.buildenv: $(BUILDROOT)/.updated
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(strip $(BUILDPKGLIST))' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(realpath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(if $(filter sync-in,$(MAKECMDGOALS)),$(if $(FROM),,$(error Specify the package source directory to copy using 'FROM=')))

sync-in: $(BUILDROOT)/.configured
	rsync -a --inplace --delete $(FROM)/ $(BUILDROOT)$(INDIR)/SOURCE
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rsync -a --inplace $(if $(OVER),,--delete) $(INDIR)/SOURCE ./' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry

$(if $(filter sync-out,$(MAKECMDGOALS)),$(if $(TO),,$(error Specify the package source directory to copy into using 'TO=')))

sync-out: $(BUILDROOT)/.configured
	rsync -a --inplace $(if $(UPDATE),,--update --existing) $(BUILDROOT)$(BUILDER_HOME)/SOURCE/ $(TO)

make-depspkg: $(BUILDROOT)$(BUILDER_HOME)/.build-deps.deb

$(BUILDROOT)$(BUILDER_HOME)/.build-deps.deb: $(BUILDROOT)/.buildenv \
  $(if $(wildcard $(BUILDROOT)$(BUILDER_HOME)/SOURCE/debian/control),$(BUILDROOT)$(BUILDER_HOME)/SOURCE/debian/control)
	$(if $(wildcard $(BUILDROOT)$(BUILDER_HOME)/SOURCE/*),,$(error Source is empty. Sync-in a source directory first using 'make sync-in'))
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd SOURCE' >>$(BUILDROOT)/.host/entry
	@echo '[ -f debian/control.orig ] || cp -v debian/control debian/control.orig' >>$(BUILDROOT)/.host/entry
	@echo 'sed -i -e "/^#/ d" debian/control' >>$(BUILDROOT)/.host/entry
	@echo 'ret=0' >>$(BUILDROOT)/.host/entry
	@echo 'mk-build-deps || ret=$$?' >>$(BUILDROOT)/.host/entry
	@echo '[ ! -f debian/control.orig ] || mv debian/control.orig debian/control' >>$(BUILDROOT)/.host/entry
	@echo '[ $$ret -eq 0 ]' >>$(BUILDROOT)/.host/entry
	@echo 'mv -vf *build-deps*.deb ../.build-deps.deb' >>$(BUILDROOT)/.host/entry
	@echo '[ -f $(BUILDER_HOME)/.build-deps.deb ]' >>$(BUILDROOT)/.host/entry
	@echo 'touch $(BUILDER_HOME)/.build-deps.deb' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry

install-builddeps: $(BUILDROOT)/.builddeps

$(BUILDROOT)/.builddeps: $(BUILDROOT)$(BUILDER_HOME)/.build-deps.deb
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'dpkg --unpack $(BUILDER_HOME)/.build-deps.deb' >>$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y -f --no-install-recommends --allow-unauthenticated' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(realpath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

cleanpkg:
	rm -f $(BUILDROOT)/.buildok
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rm -f *.deb *.dsc *.changes *.tar.*' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry

buildpkg: $(BUILDROOT)/.builddeps cleanpkg
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd SOURCE' >>$(BUILDROOT)/.host/entry
	@echo 'dpkg-buildpackage -F -nc -us -uc' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry
	touch $(BUILDROOT)/.buildok

rebuildpkg: $(BUILDROOT)/.builddeps cleanpkg
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd SOURCE' >>$(BUILDROOT)/.host/entry
	@echo 'dpkg-buildpackage -F -us -uc' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry
	touch $(BUILDROOT)/.buildok

repo: $(BUILDROOT)/.repodone

$(BUILDROOT)/.repodone: $(BUILDROOT)/.buildok
	@echo '#!/bin/sh -e' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rm -rf $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@if [ -f $(BUILDROOT)$(INREPODIR)/conf/distributions ]; then \
	   echo 'cp -a $(INREPODIR)/* $(OUTREPODIR)/' >>$(BUILDROOT)/.host/entry; \
	else \
	   echo 'mkdir $(OUTREPODIR)/conf' >>$(BUILDROOT)/.host/entry; \
	   echo "archs=\"\$$(cat *.changes | sed -n -e '/^Architecture:/ { s/^[^[:space:]]\+[[:space:]]*//; s/[[:space:]]/\n/gp }' | sed -e '/^$$/ d' -e '/^all$$/ d' | sort -u | tr '\n' ' ')\"" >>$(BUILDROOT)/.host/entry; \
	   echo "comps=\"\$$(cat *.changes | sed -n -e '/^Files:/,$$ { s/^[[:space:]]\+[0-9a-f]\+[[:space:]]\+[0-9]\+[[:space:]]\+\([^[:space:]]\+\)\(\/[^[:space:]]\+\)[[:space:]].*$$/\1/p }' | sort -u | tr '\n' ' ')\"" >>$(BUILDROOT)/.host/entry; \
	   echo 'cat <<EOF >$(OUTREPODIR)/conf/distributions' >>$(BUILDROOT)/.host/entry; \
	   echo 'Origin: pocket' >>$(BUILDROOT)/.host/entry; \
	   echo 'Label: $(OUTNAME)' >>$(BUILDROOT)/.host/entry; \
	   echo 'Codename: $(OUTNAME)' >>$(BUILDROOT)/.host/entry; \
	   echo 'Architectures: $$archs' >>$(BUILDROOT)/.host/entry; \
	   echo 'Components: $$comps' >>$(BUILDROOT)/.host/entry; \
	   echo 'Description: Repository of generated packages' >>$(BUILDROOT)/.host/entry; \
	   echo 'EOF' >>$(BUILDROOT)/.host/entry; \
	fi
	@echo 'set -ex' >>$(BUILDROOT)/.host/entry
	@echo 'for f in *.changes; do' >>$(BUILDROOT)/.host/entry
	@echo "  srcname=\"\$$(sed -n -e '/^Source:/ { s/^Source:[[:space:]]*//p; q }' \$$f)\"" >>$(BUILDROOT)/.host/entry
	@echo "  srcver=\"\$$(sed -n -e '/^Version:/ { s/^Version:[[:space:]]*//p; q }' \$$f)\"" >>$(BUILDROOT)/.host/entry
	@echo '  reprepro -b $(OUTREPODIR) removesrc $(OUTNAME) $$srcname $$srcver' >>$(BUILDROOT)/.host/entry
	@echo '  reprepro -b $(OUTREPODIR) --ignore=wrongdistribution include $(OUTNAME) $$f' >>$(BUILDROOT)/.host/entry
	@echo 'done' >>$(BUILDROOT)/.host/entry
	@echo 'chmod -R a+rX $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry
	rm -rf $(BUILDREPO)
	mkdir $(BUILDREPO)
	cp -a $(BUILDROOT)$(OUTREPODIR)/* \
	      $(BUILDREPO)/
	touch $(BUILDREPO)/dists/$(OUTNAME)/Release
	touch $@

clean-repo:
	rm -f $(BUILDROOT)/.repodone
	@echo '#!/bin/sh -ex' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rm -rf $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(realpath $(BUILDROOT)) /.host/entry
	rm -rf $(BUILDREPO)
	rm -fv $(BUILDROOT)/.updated

build: buildpkg repo
rebuild: rebuildpkg repo

install-repo: $(INSTALLROOT)/.installrepodone

reinstall-repo: install-clean install-repo

install-clean:
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		clean

$(INSTALLROOT)/.installrepodone: $(BUILDROOT)/.repodone \
$(BUILDREPO)/dists/$(OUTNAME)/Release
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		clean
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		update
	@echo '#!/bin/sh -ex' >$(INSTALLROOT)/.host/entry
	@echo 'dpkg --unpack -R $(INREPODIR)' >>$(INSTALLROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y -f --no-install-recommends --allow-unauthenticated' >>$(INSTALLROOT)/.host/entry
	@chmod 0755 $(INSTALLROOT)/.host/entry
	share_network=yes $(RUN_A) $(realpath $(INSTALLROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(INSTALLROOT)/.testenv: $(INSTALLROOT)/.installrepodone
	@echo '#!/bin/sh -ex' >$(INSTALLROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(strip $(TESTPKGLIST))' >>$(INSTALLROOT)/.host/entry
	@chmod 0755 $(INSTALLROOT)/.host/entry
	share_network=yes $(RUN_A) $(realpath $(INSTALLROOT)) $(FAKEROOT) /.host/entry
	touch $@

install-shell: $(INSTALLROOT)/.testenv
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		shell

docextract:
	@echo
	@sed -n -e '$$ { x; s/^\n//; s/\n/ /g; p }' \
               -e '/^##/! d' \
               -e 's/^##//' \
               -e 's/^ //' \
               -e '/^===/ { x; s/^\n//; s/\n/ /g; p; d }' \
               -e '/^---/ { x; s/^\n//; s/\n/ /g; p; d }' \
               -e '/^$$/ { x; s/^\n//; s/\n/ /g; p; x; p; x; d }' \
               -e 'H' \
	       $(firstword $(MAKEFILE_LIST))

help:
	@$(MAKE) -s -f $(firstword $(MAKEFILE_LIST)) docextract | \
	sed -e '/^[[:space:]]*\*[[:space:]]/ s/\..*$$/./' | \
	fmt -w $$(tput cols) | \
	sed -e 's/ \(===\+\)$$/\n\1/' \
	    -e 's/ \(---\+\)$$/\n\1/'

doc:
	@$(MAKE) -s -f $(firstword $(MAKEFILE_LIST)) docextract | \
	fmt -w $$(tput cols) | \
	sed -e 's/ \(===\+\)$$/\n\1/' \
	    -e 's/ \(---\+\)$$/\n\1/'

.PHONY: bootstrap download extract clean clean-updated update install install-buildenv shell sync-in sync-out make-depspkg install-builddeps buildpkg build rebuildpkg rebuild cleanpkg clean-repo repo install-repo reinstall-repo install-clean install-shell help doc
