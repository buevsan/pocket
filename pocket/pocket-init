#!/bin/sh -efu
#
# Copyright (C) 2014  Paul Wolneykien <manowar@altlinux.org>
# Copyright (C) 2014  STC Metrotek [http://metrotek.spb.ru/]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

PROG="${PROG:-${0##*/}}"
PROG_VERSION="0.2.0"
PROG_PATH="${0%/*}"

. "$PROG_PATH/pocket-functions.sh"

show_help() {
    cat <<EOF
Usage: $PROG [ options ] [ POCKETDIR ] [ REPO:DIST[/COMP] ... ]

$PROG initializes the specified directory POCKETDIR as a pocket by
writing down the corresponding $POCKETFILE. The default pocket
directory is used when none is specified.
EOF

cat <<EOF

  -c CONFFILE, --config=CONFFILE    use configuration file CONFFILE;
  -f TYPE, --flavour=TYPE           explicitly select the pocket
                                    flavour TYPE;

  -F, --avail-flavours              list the available pocket
                                    flavours and exit;

  -a ARCH, --arch=ARCH              target architecture;

  -n NUM, --num=NUM                 set the subconfiguration number to
                                    NUM;

  -u, --update                      update the existing $POCKETFILE.

EOF
    exit 0
}

show_usage() {
    echo
    show_help | head -1
    echo "Use \`$PROG --help\` for more information."
}

print_version()
{
    cat <<EOF
$PROG version $PROG_VERSION
EOF
}


OPTS=`getopt -n $PROG -o q,v,V,h,c:,f:,F,a:,n:,u -l quiet,verbose,version,help,config:,flavour:,avail-flavours,arch:,num:,update -- "$@"` || ( ret=$?; show_usage; exit $ret ) >&2
eval set -- "$OPTS"

quiet=; verbose=; config=; flavour=; arch=; update=; num=
while :; do
    case "$1" in
    -q|--quiet) quiet=-q;;
    -v|--verbose) verbose=-v;;
    -V|--version) print_version; exit 0;;
    -h|--help) show_help;;
    -c|--config) shift; config="$1";;
    -f|--flavour) shift; flavour="$1";;
    -F|avail-flavours) do_print_flavours;;
    -a|--arch) shift; arch="$1";;
    -n|--num) shift; num="$1";;
    -u|--update) update=-u;;
    --) shift; break;;
    *)
        fatal 'Unrecognized option: %s\n' "$1"
        ;;
    esac
    shift
done


## Functions

# Lists the available flavours and exit
do_print_flavours()
{
    load_config ${config:+"$config"}
    print_flavours
    exit 0
}


## Main

load_config ${config:+"$config"}

if [ $# -gt 0 ]; then
    # Set the POCKETDIR iff $1 doesn't look like a repo:component
    if [ "${1%%:*}" = "$1" ]; then
        POCKETDIR="$1"; shift
    fi
fi

[ -n "$POCKETDIR" ] || fatal "The pocket directory isn't specified\\n"

POCKETDIR="${POCKETDIR%/}"
POCKETNAME="${POCKETDIR##*/}"

pocketfile="$POCKETDIR/$POCKETFILE";

if [ ! -f "$pocketfile" ]; then
    [ -n "$flavour" ] || flavour="$(guess_flavour)"
    if [ -z "$flavour" ]; then 
        write_error 'Unable to guess the flavour. '
        fatal 'Try to select one explicitly\n'
    fi

    # Lookup the template
    template="$(find_config "$flavour.pocket")"
    [ -n "$template" ] || \
        fatal 'Template of the flavour "%s" not found\n' \
              "$flavour"

    [ -d "$POCKETDIR" ] || mkdir -p "$POCKETDIR"
    cat "$template" >"$pocketfile"
else
    [ -n "$update" ] || \
        fatal '%s already exists\n' "$pocketfile"
    [ -z "$flavour" ] || \
        write_error "Warning: the flavour isn't updated\\n"
fi

set_config_val "$pocketfile" NUM "$num"
set_config_val "$pocketfile" ARCH "$arch"
set_config_val "$pocketfile" COMPONENTS "$*"

[ -n "${HSHPRIVDIR:-}" ] && set_config_val "$pocketfile" HSHPRIVDIR "$HSHPRIVDIR"
[ -n "${RESOLVCONF:-}" ] && set_config_val "$pocketfile" RESOLVCONF "$RESOLVCONF"
[ -n "${SKIPSYNC-}" ] && set_config_val "$pocketfile" SKIPSYNC "$SKIPSYNC"

del_config_section "$pocketfile" Repositories
if [ $# -gt 0 ]; then
    echo >>"$pocketfile"
    echo >>"$pocketfile"
    echo "# Repositories" >>"$pocketfile"
    echo "# ------------" >>"$pocketfile"
    for comp in "$@"; do echo "${comp%%:*}"; done | \
        sort -u | \
        while read repo; do
            repoconf="$(find_config "$repo.repo")"
            [ -n "$repoconf" ] || \
                fatal 'Configuration file for repository "%s" not found\n' \
                "$repo"
            cat "$repoconf" >>"$pocketfile"
        done
fi
